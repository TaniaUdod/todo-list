{"version":3,"file":"static/js/13.2bd93e1d.chunk.js","mappings":"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","sources":["webpack://todo-list/./src/components/TaskEditForm/TaskEditForm.module.scss?6499","components/TaskEditForm/TaskEditForm.tsx","webpack://todo-list/./src/components/TodoItem/TodoItem.module.scss?994a","components/TodoItem/TodoItem.tsx","store/selectors.ts","components/TodoList/TodoList.tsx","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","webpack://todo-list/./src/components/TaskForm/TaskForm.module.scss?ad61","components/TaskForm/TaskForm.tsx","pages/AllTasks/AllTasks.tsx","store/hooks.ts","webpack://todo-list/./src/pages/AllTasks/AllTasks.module.scss?d051"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form-edit\":\"TaskEditForm_form-edit__jGCVi\",\"save\":\"TaskEditForm_save__LvB1L\",\"cancel\":\"TaskEditForm_cancel__VfGPf\"};","import { FC, FormEvent, useState } from \"react\";\r\nimport { Task } from \"../../types/types\";\r\nimport css from \"./TaskEditForm.module.scss\";\r\n\r\ninterface TaskEditFormProps {\r\n  task: Task;\r\n  onSave: (updatedTask: Task) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst TaskEditForm: FC<TaskEditFormProps> = ({ task, onSave, onCancel }) => {\r\n  const [editedTitle, setEditedTitle] = useState(task.title);\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    const updatedTask: Task = { ...task, title: editedTitle };\r\n    onSave(updatedTask);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onCancel();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={css[\"form-edit\"]}>\r\n      <input\r\n        type=\"text\"\r\n        value={editedTitle}\r\n        onChange={(event) => setEditedTitle(event.target.value)}\r\n      />\r\n      <button type=\"submit\" className={css.save}>\r\n        Save\r\n      </button>\r\n      <button type=\"button\" onClick={handleCancel} className={css.cancel}>\r\n        Cancel\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TaskEditForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"todo-item\":\"TodoItem_todo-item__JiqsP\",\"edit\":\"TodoItem_edit__5qtk6\",\"delete\":\"TodoItem_delete__QX5uI\",\"restore\":\"TodoItem_restore__s9GAv\"};","import { FC, useState } from \"react\";\r\nimport { Task } from \"../../types/types\";\r\nimport { useAppDispatch } from \"../../store/hooks\";\r\nimport { toggleTaskDeleted, updateTask } from \"../../store/tasksSlice\";\r\nimport TaskEditForm from \"../TaskEditForm/TaskEditForm\";\r\nimport toast from \"react-hot-toast\";\r\nimport css from \"./TodoItem.module.scss\";\r\n\r\ninterface TodoItemProps {\r\n  task: Task;\r\n  onRestore?: () => void;\r\n}\r\n\r\nconst TodoItem: FC<TodoItemProps> = ({ task, onRestore }) => {\r\n  const dispatch = useAppDispatch();\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleDelete = () => {\r\n    dispatch(toggleTaskDeleted(task.id));\r\n    toast.success(\"Task deleted successfully\", { position: \"top-right\" });\r\n  };\r\n\r\n  const handleRestore = () => {\r\n    if (onRestore) {\r\n      onRestore();\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const handleSaveEdit = (updatedTask: Task) => {\r\n    dispatch(updateTask(updatedTask));\r\n    toast.success(\"Task updated successfully\", { position: \"top-right\" });\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <li className={css[\"todo-item\"]}>\r\n      {isEditing ? (\r\n        <TaskEditForm\r\n          task={task}\r\n          onSave={handleSaveEdit}\r\n          onCancel={handleCancel}\r\n        />\r\n      ) : (\r\n        <>\r\n          <span>{task.title}</span>\r\n\r\n          {onRestore ? (\r\n            <button onClick={handleRestore} className={css.restore}>\r\n              Restore\r\n            </button>\r\n          ) : (\r\n            <>\r\n              <button onClick={handleEdit} className={css.edit}>\r\n                Edit\r\n              </button>\r\n              <button onClick={handleDelete} className={css.delete}>\r\n                Delete\r\n              </button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"./store\";\r\n\r\nexport const selectTasks = (state: RootState) => state.tasks;\r\n\r\nexport const selectItems = createSelector(\r\n  [selectTasks],\r\n  (tasks) => tasks.items\r\n);\r\n\r\nexport const selectDeletedTasks = createSelector(\r\n  [selectTasks],\r\n  (tasks) => tasks.deletedTasks\r\n);\r\n","import { FC } from \"react\";\r\nimport { useAppSelector } from \"../../store/hooks\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport { selectItems, selectDeletedTasks } from \"../../store/selectors\";\r\nimport { Task } from \"../../types/types\";\r\nimport toast from \"react-hot-toast\";\r\n\r\ninterface TodoListProps {\r\n  deleted?: boolean;\r\n  onRestore?: (taskId: string) => void;\r\n}\r\n\r\nconst TodoList: FC<TodoListProps> = ({ deleted = false, onRestore }) => {\r\n  const tasks = useAppSelector(deleted ? selectDeletedTasks : selectItems);\r\n\r\n  const handleRestore = (taskId: string) => {\r\n    if (onRestore) {\r\n      onRestore(taskId);\r\n      toast.success(\"Task restored successfully\", { position: \"top-right\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {tasks.map((task: Task) => (\r\n        <TodoItem\r\n          key={task.id}\r\n          task={task}\r\n          onRestore={deleted ? () => handleRestore(task.id) : undefined}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"TaskForm_form__ZtN5H\"};","import { FC, FormEvent, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { Task } from \"../../types/types\";\r\nimport toast from \"react-hot-toast\";\r\nimport css from \"./TaskForm.module.scss\";\r\n\r\ninterface TaskFormProps {\r\n  onSubmit: (task: Task) => void;\r\n}\r\n\r\nconst TaskForm: FC<TaskFormProps> = ({ onSubmit }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (title.trim()) {\r\n      const newTask: Task = {\r\n        id: uuidv4(),\r\n        title: title,\r\n      };\r\n\r\n      onSubmit(newTask);\r\n      setTitle(\"\");\r\n      toast.success(\"Task added successfully\", { position: \"top-right\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={css.form}>\r\n      <input\r\n        type=\"text\"\r\n        value={title}\r\n        placeholder=\"Enter your task...\"\r\n        onChange={(event) => setTitle(event.target.value)}\r\n      />\r\n      <button type=\"submit\">Add Task</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import { FC } from \"react\";\r\nimport { addTask } from \"../../store/tasksSlice\";\r\nimport { useAppDispatch } from \"../../store/hooks\";\r\nimport { Task } from \"../../types/types\";\r\nimport TodoList from \"../../components/TodoList/TodoList\";\r\nimport TaskForm from \"../../components/TaskForm/TaskForm\";\r\nimport css from \"./AllTasks.module.scss\";\r\n\r\nconst AllTasks: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleAddTask = (task: Task) => {\r\n    dispatch(addTask(task));\r\n  };\r\n\r\n  return (\r\n    <div className={css.tasks}>\r\n      <h2>All Tasks</h2>\r\n      <TaskForm onSubmit={handleAddTask} />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllTasks;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>();\r\nexport const useAppSelector = useSelector.withTypes<RootState>();\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tasks\":\"AllTasks_tasks__m1Fhh\"};"],"names":["_ref","task","onSave","onCancel","editedTitle","setEditedTitle","useState","title","_jsxs","onSubmit","event","preventDefault","updatedTask","className","css","children","_jsx","type","value","onChange","target","onClick","handleCancel","onRestore","dispatch","useAppDispatch","isEditing","setIsEditing","TaskEditForm","updateTask","toast","success","position","_Fragment","handleRestore","handleEdit","handleDelete","toggleTaskDeleted","id","selectTasks","state","tasks","selectItems","createSelector","items","selectDeletedTasks","deletedTasks","deleted","useAppSelector","map","TodoItem","taskId","undefined","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","arguments","length","options","buf","native","rnds","random","setTitle","trim","newTask","uuidv4","placeholder","AllTasks","TaskForm","addTask","TodoList","useDispatch","withTypes","useSelector"],"sourceRoot":""}